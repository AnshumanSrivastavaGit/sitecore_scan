#!/usr/bin/env ruby
#
# This file is part of SitecoreScan
# https://github.com/bcoles/sitecore_scan
#

require 'sitecore_scan'
require 'optparse'
require 'resolv'

def banner
  puts "
   _____ _ _                           _____                 
  / ____(_) |                         / ____|                
 | (___  _| |_ ___  ___ ___  _ __ ___| (___   ___ __ _ _ __  
  \\___ \\| | __/ _ \\/ __/ _ \\| '__/ _ \\\\___ \\ / __/ _` | '_ \\ 
  ____) | | ||  __/ (_| (_) | | |  __/____) | (_| (_| | | | |
 |_____/|_|\\__\\___|\\___\\___/|_|  \\___|_____/ \\___\\__,_|_| |_|
                                               version 0.0.1"
  puts
  puts '-'*60
end

banner
options = {}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: sitecore-scan <url> [options]"

  opts.on('-u URL', '--url URL', 'Sitecore URL to scan') do |v|
    unless v.match(%r{\Ahttps?://})
      puts "- Invalid URL: #{v}"
      exit(1)
    end
    options[:url] = v
  end

  opts.on('-s', '--skip', 'Skip check for Sitecore') do
    options[:skip] = true
  end

  opts.on('-v', '--verbose', 'Enable verbose output') do
    options[:verbose] = true
  end

  opts.on('-h', '--help', 'Show this help') do 
    puts opts
    exit
  end
end

opts.parse!

$VERBOSE = true unless options[:verbose].nil?
@check = true unless options[:skip]

if options[:url].nil?
 puts opts
 exit(1)
end

def scan(url)
  puts "Scan started at #{Time.now.getutc}"
  puts "URL: #{url}"

  # parse URL
  target = nil
  begin
    target = URI::parse(url.split('?').first)
  rescue
    puts "- Could not parse target URL: #{url}"
  end
  exit(1) if target.nil?

  # resolve IP address
  begin
    ip = Resolv.getaddress(target.host).to_s
    puts "IP: #{ip}" unless ip.nil?
  rescue
    puts "- Could not resolve hostname #{target.host}"
  end

  puts "Port: #{target.port}"
  puts '-' * 60

  # Check if the URL is Sitecore
  if @check
    if SitecoreScan::isSitecore(url)
      puts "+ Found Sitecore CMS"
    else
      puts "- Sitecore CMS not found"
      exit(1)
    end
  end

  # Get Sitecore version
  version = SitecoreScan::getVersion(url)
  puts "+ Version: #{version}" if version

  # Glimpse debugging enabled
  glimpse = SitecoreScan::glimpseDebugging(url)
  puts "+ Glimpse debugging is enabled" if glimpse

  # SOAP API accessible
  soap_api = SitecoreScan::remoteSoapApi(url)
  puts "+ Remote SOAP API is available" if soap_api

  puts "Scan finished at #{Time.now.getutc}"
  puts '-' * 60
end

scan(options[:url])
